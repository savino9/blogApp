<!-- views/partials/header.ejs -->

<nav class="navbar navbar-inverse">
  <div class="container-fluid">
    <div class="navbar-header">
      <a class="navbar-brand" href="#">Blog Application</a>
    </div>
    <ul class="nav navbar-nav">
      <li class="active"><a href="/">Home</a></li>
    </ul>
    <ul class="nav navbar-nav navbar-right">
      <li><a href="#" data-toggle="modal" data-target="#signUpModal"><span class="glyphicon glyphicon-user"></span> Sign Up</a></li>
      <li><a href="#" data-toggle="modal" data-target="#loginModal"><span class="glyphicon glyphicon-log-in"></span> Login</a></li>
    </ul>
  </div>
</nav>

<!-- Modal -->
<div class="modal fade" id="signUpModal" role="dialog">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h1 class="modal-title">Insert your data</h1>
      </div>
      <form id="signup" action="/signup" method="post" accept-charset="utf-8"> 
        <div class="modal-body">
          <div class="form-group">
            <div class="col-sm-5 messages" style="float: right;"></div>
            <h3>Username:</h3>
            <input id="username" class="form-control" type="text" name="username" placeholder="username">
          </div>
          <div class="form-group">
            <div class="col-sm-5 messages" style="float: right;"></div>
            <h3>Email:</h3>
            <input id="email" class="form-control" type="email" name="email" placeholder="username">
          </div>
          <div class="form-group">
            <div class="col-sm-5 messages" style="float: right;"></div>
            <h3>Password:</h3>
            <input id="password" class="form-control" type="password" name="password" placeholder="password">
          </div>
          <div class="form-group">
            <div class="col-sm-5 messages" style="float: right;"></div>
            <h3>Confirm Password:</h3>
            <input id="confirm-password" class="form-control" type="password" name="confirm-password" placeholder="confirm password">
          </div>
        </div>
        <div class="modal-footer">
          <button id="createUser" type="submit" class="btn btn-default btn-success">CREATE</button>
        </div>
      </form>
    </div>
  </div>
</div>

<div class="modal fade" id="loginModal" role="dialog">
  <div class="modal-dialog">
  
    <div class="modal-content">

      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h1 class="modal-title">Insert your data</h1>
      </div>

      <form id="login" action="/login" method="post" accept-charset="utf-8"> 
        <div class="modal-body">
          <h3>Email:</h3>
          <input type="email" name="email" placeholder="email" required>
          <h3>Password:</h3>
          <input type="password" name="password" placeholder="password" required>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-default btn-success">Login</button>
        </div>
      </form>
    </div>
    
  </div>
</div>

<script src="//cdnjs.cloudflare.com/ajax/libs/validate.js/0.12.0/validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>

<script>
$(document).ready(() => {
  // These are the constraints used to validate the form
  var constraints = {
    email: {
      // Email is required
      presence: true,
      // and must be an email (duh)
      email: true
    },
    password: {
      // Password is also required
      presence: true,
      // And must be at least 5 characters long
      length: {
        minimum: 8
      }
    },
    "confirm-password": {
      // You need to confirm your password
      presence: true,
      // and it needs to be equal to the other password
      equality: {
        attribute: "password",
        message: "^The passwords does not match"
      }
    },
    username: {
      // You need to pick a username too
      presence: true,
      // And it must be between 3 and 20 characters long
      length: {
        minimum: 3,
        maximum: 20
      },
      format: {
        // We don't allow anything that a-z and 0-9
        pattern: "[a-z0-9]+",
        // but we don't care if the username is uppercase or lowercase
        flags: "i",
        message: "can only contain a-z and 0-9"
      }
    }
  };

  // Hook up the form so we can prevent it from being posted
  var form = document.querySelector("form#signup");

  form.addEventListener("submit", (ev) => {
    ev.preventDefault();
    handleFormSubmit(form);
  });

  // Hook up the inputs to validate on the fly
  var inputs = document.querySelectorAll("form#signup input");
  for (var i = 0; i < inputs.length; ++i) {
    inputs.item(i).addEventListener("change", function(ev) {
      var errors = validate(form, constraints) || {};
      showErrorsForInput(this, errors[this.name])
    });
  }

  function handleFormSubmit(form, input) {
    // validate the form aainst the constraints
    var errors = validate(form, constraints);
    // then we update the form to reflect the results
    showErrors(form, errors || {});
    if (!errors) {
      form.submit();
    }
  }

  // Updates the inputs with the validation errors
  function showErrors(form, errors) {
    // We loop through all the inputs and show the errors for that input
    form.querySelectorAll("input[name]"), (input) => {
      // Since the errors can be null if no errors were found we need to handle
      // that
      showErrorsForInput(input, errors && errors[input.name]);
    };
  }

  // Shows the errors for a specific input
  function showErrorsForInput(input, errors) {
    // This is the root of the input
    var formGroup = closestParent(input.parentNode, "form-group")
      // Find where the error messages will be insert into
      , messages = formGroup.querySelector(".messages");
    // First we remove any old messages and resets the classes
    resetFormGroup(formGroup);
    // If we have errors
    if (errors) {
      // we first mark the group has having errors
      formGroup.classList.add("has-error");
      // then we append all the errors
      _.each(errors, (error) => {
        addError(messages, error);
      });
    } else {
      // otherwise we simply mark it as success
      formGroup.classList.add("has-success");
    }
  }

  // Recusively finds the closest parent that has the specified class
  function closestParent(child, className) {
    if (!child || child == document) {
      return null;
    }
    if (child.classList.contains(className)) {
      return child;
    } else {
      return closestParent(child.parentNode, className);
    }
  }

  function resetFormGroup(formGroup) {
    // Remove the success and error classes
    formGroup.classList.remove("has-error");
    formGroup.classList.remove("has-success");
    // and remove any old messages
    _.each(formGroup.querySelectorAll(".help-block.error"), el => {
      el.parentNode.removeChild(el);
    });
  }

  // Adds the specified error with the following markup
  // <p class="help-block error">[message]</p>
  function addError(messages, error) {
    var block = document.createElement("p");
    block.classList.add("help-block");
    block.classList.add("error");
    block.innerText = error;
    messages.appendChild(block);
  };
  
  // Check Username
  let username = '';
  $("#username").on("keyup", (e) => {  
    username = $('#username').val();
  });
    
  $('#username').focusout(() => {
    if (username.length >= 3) {
      checkUsername(username);  
    }
  })

  function checkUsername(username){
    $.ajax({
      type: 'get',
      contentType: "application/json; charset=utf-8",
      dataType: "json",
      url: `/users`,
      success: (allUsers) => {
        let users,
        input = document.querySelector("input#username"),
        formGroup = closestParent(input.parentNode, "form-group"),
        messages = formGroup.querySelector(".messages");
        for(let prop in allUsers.allUsers){
          users = Object.values(allUsers.allUsers);
        }
        for (var i = 0; i < users.length; i++) {
          if (username.toLowerCase() === users[i]) {
            formGroup.classList.add("has-error");
            let error = 'Username already in use'; 
            let block = document.createElement("p");
            block.classList.add("help-block");
            block.classList.add("error");
            block.innerText = error;
            messages.appendChild(block);
          } else {
            formGroup.classList.add("has-success");
          }  
        }
      }  
    });
  }
});
</script>